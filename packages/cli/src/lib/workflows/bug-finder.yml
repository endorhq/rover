# Bug finder
# This workflow analyzes the code and look for potential root causes of the given
# issue. It tries then to fix it and provides a detailed view of its findings
version: '1.0'
name: 'bug-finder'
description: 'Analyze a given error, find potential issues, and try to fix them'

inputs:
  - name: description
    description: 'Bug description'
    label: 'Describe the bug and any relevant information'
    type: string
    required: true
  - name: steps
    description: 'Steps to reproduce the bug'
    label: 'Describe the steps to reproduce the bug'
    type: string
    required: false

outputs:
  - name: summary
    description: 'Summary and findings after the bug analysis'
    type: file
    filename: summary.md
  - name: context
    description: 'Context analysis'
    type: file
    filename: context.md

config:
  timeout: 1800
  # We continue on error since the agent might not be able to reproduce the steps.
  continueOnError: true

steps:
  - id: context
    type: agent
    name: 'Context Analysis'
    prompt: |
      You are preparing a technical context for this task implementation:

      Task title: {{inputs.title}}
      Task description: {{inputs.description}}

      Follow these steps to complete it. Do not move to the next phase until to complete the previous one.

      1. Phase 1: Triage the task complexity.
         - Identify the task complexity by analyze the affected files and the complexity of the task. Categorize it on:
           - Simple task: affects 1-3 files. No complex changes involved. The changes are straightforward and a plan might not be required.
           - Complex task: affects multiple files. It requires to introduce new libraries or create them. To properly implement them, it is recommended to first write a plan.
      2. Phase 2: Adapt your analysis depth:
         - For simple tasks: fill only the "Task Complexity", "Relevant Code" and "Extra OS packages" sections. Skip all other sections
         - For complex tasks: complete all sections.

      Follow these rules to complete the research:

      - Use 1-line bullets wherever possible. Do not fabricate content; if information is unavailable or irrelevant, skip it
      - Find the main file or files affected by these changes. Then, identify other secondary files. Focus mostly on main files and avoid a deep research in the secondary ones
      - Follow the template strictly
      - Just output the template. Skip any text before and after
      - Use globs when a change affects multiple files

      Then, write your structured analysis to `context.md` following this template. This is mandatory.

      <template>
      # Context

      ## Task complexity

      simple|complex

      ## Relevant code

      - path/to/file:start-end: 1-line description (include line numbers only if code is accessible)

      ## Extra OS packages

      Identify missing OS packages to accomplish this task and install them using the tools provided by the `package-manager` MCP. Return a list of new installed packages or "No additional packages required".

      ## Relevant knowledge

      Skip this entire section and title for simple tasks

      ### Patterns

      - pattern: brief description (only if non-standard)

      ### Dependencies

      - library name: 1-line description about why this library is relevant

      </template>

      IMPORTANT: After writing context.md, you MUST extract the task complexity value and return it.
    outputs:
      - name: complexity
        description: 'Task complexity: either "simple" or "complex"'
        type: string
      - name: context_file
        description: 'Technical context analysis file'
        type: file
        filename: context.md

  - id: plan
    type: agent
    name: 'Planning'
    prompt: |
      You are preparing an implementation plan for this task:

      ---

      Title: {{inputs.title}}
      Description:
      {{inputs.description}}
      Context: {{steps.context.outputs.context_file}}

      ---

      Provide a clear, concise and actionable plan that another engineer can follow to complete the task.

      Follow these steps to complete it. Do not move to the next phase until to complete the previous one.

      ### Phase 1: Evaluate task requirements

      - Read the provided context
      - Identify the complexity of the given task. Check the context.
      - Define a clear and concise objective for the plan
      - Specify the scope, focusing on the task objective
      - Identify files that will be affected by the changes
      - Identify existing test files that should be updated

      ### Phase 2: Write a plan based on the task requirements.

      Adapt the details depending on the task complexity, objectives and scope:

      - Simple task: ≤3 steps max, short objective, scope limited to 1–3 files. Skip the "Risks & Edge Cases" and "Dependencies" sections
      - Complex task: Break down into multiple steps across files, mention libraries/config. Complete all sections

      ### Phase 3: Output

      - Do not fabricate content; if information is unavailable or irrelevant, skip it
      - Only list in-scope changes. Do not mention out-of-scope items.
      - Only add existing test files to the scope and implementation steps. Do not add any step or scope item to create new test suites unless the task description request it explicitly. This is VERY IMPORTANT
      - Break down implementation into small, clear and concise steps. Do not overengineer, focus on the changes to complete the task and clear side effects.
      - Follow the template strictly
      - Just output the template. Skip any text before and after

      Write your plan to `plan.md` following this template. This is mandatory.

      <template>
      # Implementation Plan

      ## Objective

      1-2 sentences describing the task objective

      ## Scope

      - List of changes that are in the task scope (one line each)

      ## Implementation Steps

      - [ ] One line each, start with a verb, always include filenames, keep concise and actionable.

      ## Risks & Edge Cases

      - Potential pitfalls in 1 line each (skip if none)

      ## Dependencies

      - Prerequisite libraries, configs, or tasks (skip if none)
      </template>
    outputs:
      - name: plan_file
        description: 'Implementation plan file'
        type: file
        filename: plan.md

  - id: implement
    type: agent
    name: 'Implementation'
    prompt: |
      You are in implementation mode.
      Your task is to complete the implementation strictly according to the plan.

      ---

      Task:
      Title: {{inputs.title}}
      Description:
      {{inputs.description}}

      Context: 
      ```
      {{steps.context.outputs.context_file}}
      ```

      Plan: 
      ```
      {{steps.plan.outputs.plan_file}}
      ```
      ---

      ### Phase 1: Triage task complexity

      - **Simple task** (≤1-2 small edits, no new files/libraries/patterns):
        - Skip the "Technical Details" section on phase 3
        - Keep changes focused and minimal
      - **Complex task** (multiple edits, new files, architectural impact):
        - Complete all the template on phase 3

      ### Phase 2: Implementation process

      1. Follow the steps in `plan.md` sequentially.
      2. Reference `context.md` for technical constraints.
      3. Make minimal, maintainable changes that fit existing patterns
      4. Validate the implementation steps checklist from the plan.md file is done

      ### Phase 3: Output

      - Do not fabricate content; if information is unavailable or irrelevant, skip it
      - Only include changes that you implemented
      - Follow the template strictly
      - Just output the template. Skip any text before and after

      Write `changes.md` following this template. This is mandatory.

      <template>
      # Implementation Changes

      ## Overview

      1-2 sentences on what was implemented and why

      ## Files Modified

      ### `path/to/file.ts`

      **Purpose**: What this file does in the system
      **Changes made**:

      - Bullet list of actual changes with explanations

      ## Files Added

      ### `path/to/new-file.ts`

      **Purpose**: What this file does
      **Implementation details**:

      - Explanation of structure, functions, and integrations

      ## Technical Details

      - Architectural decisions
      - Dependencies added/changed
      </template>
    outputs:
      - name: changes_file
        description: 'Implementation changes file'
        type: file
        filename: changes.md

  - id: review
    type: agent
    name: 'Code Review'
    prompt: |
      You are in review mode, performing a strict code review for this task.
      Examine the task context, plan, and implementation.

      ---

      Title: {{inputs.title}}
      Description:
      {{inputs.description}}
      Task Complexity: {{steps.context.outputs.complexity}}

      Plan: 
      ```
      {{steps.plan.outputs.plan_file}}
      ```

      Changes: 
      ```
      {{steps.implement.outputs.changes_file}}
      ```
      ---

      ### Phase 1: Confirm if review is required

      Check the task complexity from above.

      - Simple task: skip the review entirely. Output: {"skipped": "true", "issues_found": "false"} and do NOT create any file. Stop here.
      - Complex task: continue with the next phase.

      ### Phase 2: For complex tasks, perform the review

      1. Compare the implementation in "Changes" against "Plan"
      2. Review code changes for quality, and adherence to existing patterns
      3. Verify task requirements are satisfied
      4. Check security concerns

      ### Phase 3: Output

      - If the implementation is satisfactory: output {"skipped": "false", "issues_found": "false"} and do NOT create any file.
      - Do not fabricate content; if information is unavailable or irrelevant, skip it
      - If issues are found: output {"skipped": "false", "issues_found": "true"} and create `review.md` with the following template:

      <template>
      # Code Review

      ## Overall Assessment

      Brief summary of the implementation quality and major concerns

      ## Plan Adherence Issues

      ### Deviations from plan.md:

      - [Deviation]: [Why it matters and what to do]

      ## Code Quality Issues

      ### [File path/section]

      **Issue**: [Concise description of the problem]
      **Severity**: Must Fix | Nice to have
      **Recommendation**: [Actionable action]
      **Code location**: [Line numbers or function names]

      ## Security Concerns

      ### [Specific security issue]

      **Risk**: [Condise Risk description]
      **Severity**: Must Fix | Nice to have
      **Recommendation**: [Actionable action]
      </template>
    outputs:
      - name: skipped
        description: 'Whether review was skipped (true/false)'
        type: string
      - name: issues_found
        description: 'Whether issues were found (true/false)'
        type: string
      - name: review_file
        description: 'Code review file with issues (only created if issues found)'
        type: file
        filename: review.md

  - id: apply_review
    type: agent
    name: 'Apply Review Fixes'
    prompt: |
      You are in apply-review mode.

      ---

      Title: {{inputs.title}}
      Description:
      {{inputs.description}}
      Issues Found: {{steps.review.outputs.issues_found}}

      Context: 
      ```
      {{steps.context.outputs.context_file}}
      ```

      Review:
      ```
      {{steps.review.outputs.review_file}}
      ```

      ---

      ### Phase 1: Triage task complexity

      Check if issues were found: {{steps.review.outputs.issues_found}}

      - If issues_found is "false": output {"fixes_applied": "false"} and do NOT modify any files. Stop here.
      - Otherwise, continue.

      ### Phase 2: Apply fixes

      1. Read all issues in Review
      2. Fix issues systematically by priority: Must Fix → Nice to have
      3. Follow review recommendations exactly — do not invent alternative solutions
      4. Ensure fixes preserve existing functionality and do not introduce regressions
      5. Reference Context for consistency

      ### Phase 3: Output

      Write `review_fixes.md` following this template only if you fixed any issue. This is mandatory.

      <template>
      ## Review Fixes Applied

      ### Issues Addressed

      - **[Issue name]**: [Brief description of fix]
        - Files modified: [file paths]
        - Changes made: [concise description]
      </template>
    outputs:
      - name: fixes_applied
        description: 'Whether fixes were applied (true/false)'
        type: string
      - name: review_fixes_file
        description: 'Updated changes file with review fixes appended'
        type: file
        filename: review_fixes.md

  - id: summary
    type: agent
    name: 'Summary'
    prompt: |
      You are in summary mode.

      ---

      Title: {{inputs.title}}
      Description:
      {{inputs.description}}
      Task Complexity: {{steps.context.outputs.complexity}}

      Context: 
      ```
      {{steps.context.outputs.context_file}}
      ```

      Changes: 
      ```
      {{steps.implement.outputs.changes_file}}
      ```
      ---

      ### Phase 1: Triage task complexity

      Check the context to identify the task complexity: {{steps.context.outputs.complexity}}

      - Simple task: skip the "Technical decisions" and "Notes" sections in phase 3.
      - Complex task: complete the full template in phase 3.

      ### Phase 2: For complex tasks

      - Use only information from Context and Changes
      - Do not fabricate content; if a section has nothing to report, write `None`
      - Keep all required sections concise: 1-2 sentences or one-line bullets only

      ### Phase 3: Output

      Write to `summary.md` following this template. This is mandatory.

      <template>
      # Implementation Summary

      ## What was implemented

      1-2 sentences describing the changes made

      ## Files modified

      - `path/to/file`: Brief description of changes

      ## Technical decisions

      - Key decision and rationale (skip if none)

      ## Notes

      - Remaining tasks, considerations, or `None`
      </template>
    outputs:
      - name: summary_file
        description: 'Implementation summary file'
        type: file
        filename: summary.md
